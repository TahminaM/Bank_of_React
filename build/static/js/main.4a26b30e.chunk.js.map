{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","index.js"],"names":["AccountBalance","Math","round","this","props","accountBalance","Component","Home","src","alt","to","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","inputField","target","name","inputValue","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","htmlFor","type","onChange","Credits","credits","map","credit","date","slice","amount","description","id","addCredit","placeholder","Debits","debits","debit","addDebit","App","newEntry","today","Date","String","random","Number","getMonth","newArray","push","logInInfo","newUser","currentUser","exact","path","render","getCredits","a","fetch","response","json","addBalance","getDebits","subBalance","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a26b30e.chunk.js","sourcesContent":["// src/components/AccountBalance.js\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass AccountBalance extends Component {\r\n    render() {\r\n        return (\r\n            <div>               {/*Rounds the current account balance to 2 decimal places*/}\r\n                Balance: ${Math.round(this.props.accountBalance * 100) / 100}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountBalance;","// src/components/Home.js\r\n// The Home component is used to demonstrate the use of Link.\r\n\r\nimport React, {Component} from 'react';\r\nimport AccountBalance from './AccountBalance';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src=\"https://picsum.photos/200/200\" alt=\"bank\"/>\r\n        <h1>Bank of React</h1>\r\n\r\n        <Link to=\"/userProfile\">User Profile</Link>\r\n        <br/>\r\n        <Link to=\"/login\">Login</Link>\r\n        <br/>\r\n        <Link to=\"/credits\">Credits</Link>\r\n        <br/>\r\n        <Link to=\"/debits\">Debits</Link>\r\n        \r\n        <AccountBalance accountBalance={this.props.accountBalance}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","// src/components/UserProfile.js\r\n// The UserProfile component is used to demonstrate the use of Route and Link.\r\n\r\nimport React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nclass UserProfile extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h1>User Profile</h1>\r\n  \r\n            <div>Username: {this.props.userName}</div>\r\n            <div>Member Since: {this.props.memberSince}</div>\r\n            \r\n            <Link to=\"/\">Return to Home</Link>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default UserProfile;","// src/components/Login.js\r\n// The LogIn component is used to demonstrate the use of Redirect.\r\n\r\nimport React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass LogIn extends Component {\r\n  constructor () {  // Create and initialize state\r\n    super()\r\n    this.state = {\r\n      user: {\r\n        userName: '',\r\n        password: ''\r\n      },\r\n      redirect: false\r\n    }\r\n  }\r\n\r\n  // When the user name input is changed, capture the input and update the state (user.userName)\r\n  handleChange = (e) => {\r\n    const updatedUser = {...this.state.user}\r\n    const inputField = e.target.name\r\n    const inputValue = e.target.value\r\n    updatedUser[inputField] = inputValue\r\n\r\n    this.setState({user: updatedUser})\r\n  }\r\n\r\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.mockLogIn(this.state.user)\r\n    this.setState({redirect: true})\r\n  }\r\n  \r\n  render () {\r\n    if (this.state.redirect) {  // Redirect to \"User Profile\" page when \"Log In\" button is clicked\r\n      return (<Redirect to=\"/userProfile\"/>)\r\n    }\r\n    // Render the login form\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"userName\">User Name</label>\r\n            <input type=\"text\" name=\"userName\" onChange={this.handleChange} value={this.state.user.userName} />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" name=\"password\" />\r\n          </div>\r\n          <button>Log In</button>\r\n        </form>                  \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LogIn","// src/components/Credits.js\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Credits = (props) => {\r\n    let creditsView = () => {\r\n        const { credits } = props;\r\n        return credits.map((credit) => {\r\n            let date = credit.date.slice(0, 10);\r\n            return <li key={credit.id}>{credit.amount} {credit.description} {date}</li>\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Credits</h1>\r\n            <h2>Account Balance: ${Math.round(props.accountBalance * 100) / 100}</h2>{/*Rounds to 2 decimal places*/}\r\n            {creditsView()}\r\n            <form onSubmit={props.addCredit}>\r\n                <input type=\"text\" name=\"description\" placeholder=\"Enter Description\" />\r\n                <input type=\"float\" name=\"amount\" placeholder=\"Enter Credit Amount\" />\r\n                <button type=\"submit\">Add Credit</button>\r\n            </form>\r\n            <Link to='/'>Back to Home Page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Credits;","// src/components/Debits.js\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Debits = (props) => {\r\n    let debitsView = () => {\r\n        const { debits } = props;\r\n        return debits.map((debit) => {\r\n            let date = debit.date.slice(0, 10);\r\n            return <li key={debit.id}>{debit.amount} {debit.description} {date}</li>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Debits</h1>\r\n            <h2>Account Balance: ${Math.round(props.accountBalance * 100) / 100}</h2>{/*Rounds to 2 decimal places*/}\r\n            {debitsView()}\r\n            <form onSubmit={props.addDebit}>\r\n                <input type=\"text\" name=\"description\" placeholder=\"Enter Description\" />\r\n                <input type=\"float\" name=\"amount\" placeholder=\"Enter Debit Amount\" />\r\n                <button type=\"submit\">Add Debit</button>\r\n            </form>\r\n            <Link to='/'>Back to Home Page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Debits;","// src/App.js\r\n\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport UserProfile from './components/UserProfile';\r\nimport LogIn from './components/Login';\r\nimport Credits from './components/Credits';\r\nimport Debits from './components/Debits';\r\n\r\nclass App extends Component {\r\n    constructor() {  // Create and initialize state\r\n        super();\r\n        this.state = {\r\n            accountBalance: 0,\r\n            currentUser: {\r\n                userName: 'Joe Smith',\r\n                memberSince: '07/23/96',\r\n            },\r\n            credits: [],\r\n            debits: []\r\n        }\r\n    }\r\n\r\n    // On-click function to add new credits\r\n    addCredit = (e) => {\r\n        e.preventDefault();     // Prevents the page from refreshing when the button is pressed\r\n\r\n        let newEntry = { };         // Create new object to store the new Credit entry\r\n        let today = new Date();     // Create temporary object to store the current Date\r\n\r\n        newEntry.id = String((Math.round(Math.random() * 10000000) * 10) / 10); // Generates a random string of numbers\r\n        newEntry.description = e.target.description.value;\r\n        newEntry.amount = Number(e.target.amount.value);\r\n\r\n        // If/else statement to change the date formatting if the current month is before October (January is 0)\r\n        if (today.getMonth() < 9) {\r\n            newEntry.date =\r\n                Date().slice(11, 15) + '-' + '0' + (today.getMonth() + 1) + '-' + Date().slice(8, 10);\r\n        } else {\r\n            newEntry.date =\r\n                Date().slice(11, 15) + '-' + (today.getMonth() + 1) + '-' + Date().slice(8, 10);\r\n        }\r\n\r\n        let newArray = this.state.credits;      // Create new array to update the state with\r\n        newArray.push(newEntry);        // Push the new entry to the new array\r\n\r\n        this.setState({ credits: newArray, accountBalance: this.state.accountBalance + newEntry.amount }); // Set state\r\n\r\n        e.target.description.value = '';\r\n        e.target.amount.value = '';         // Clear form entry fields\r\n\r\n    }\r\n\r\n    // On-click function to add new debits\r\n    addDebit = (e) => {\r\n        e.preventDefault();     // Prevents the page from refreshing when the button is pressed\r\n\r\n        let newEntry = { };         // Create new object to store the new Credit entry\r\n        let today = new Date();     // Create temporary object to store the current Date\r\n\r\n        newEntry.id = String((Math.round(Math.random() * 10000000) * 10) / 10); // Generates a random string of numbers\r\n        newEntry.description = e.target.description.value;\r\n        newEntry.amount = Number(e.target.amount.value);\r\n\r\n        // If/else statement to change the date formatting if the current month is before October (January is 0)\r\n        if (today.getMonth() < 9) {\r\n            newEntry.date =\r\n                Date().slice(11, 15) + '-' + '0' + (today.getMonth() + 1) + '-' + Date().slice(8, 10);\r\n        } else {\r\n            newEntry.date =\r\n                Date().slice(11, 15) + '-' + (today.getMonth() + 1) + '-' + Date().slice(8, 10);\r\n        }\r\n\r\n        let newArray = this.state.debits;      // Create new array to update the state with\r\n        newArray.push(newEntry);        // Push the new entry to the new array\r\n\r\n        this.setState({ debits: newArray, accountBalance: this.state.accountBalance - newEntry.amount });\r\n\r\n        e.target.description.value = '';\r\n        e.target.amount.value = '';         // Clear form entry fields\r\n\r\n    }\r\n\r\n    // Update state's currentUser (userName) after \"Log In\" button is clicked\r\n    mockLogIn = (logInInfo) => {\r\n        const newUser = { ...this.state.currentUser }\r\n        newUser.userName = logInInfo.userName\r\n        this.setState({ currentUser: newUser })\r\n    }\r\n\r\n    // Create Routes and React elements to be rendered using React components\r\n    render() {\r\n        const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />);\r\n        const UserProfileComponent = () => (\r\n            <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\r\n        );\r\n        const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />);  // Pass props to \"LogIn\" component\r\n\r\n        // Pass in the current account balance, the functions to add credits and debits, and the credits and debits themselves as props\r\n        const CreditsComponent = () => (<Credits accountBalance={this.state.accountBalance} addCredit={this.addCredit} credits={this.state.credits} />);\r\n        const DebitsComponent = () => (<Debits accountBalance={this.state.accountBalance} addDebit={this.addDebit} debits={this.state.debits} />);\r\n\r\n        return (\r\n            <Router>\r\n                <div>\r\n                    <Route exact path=\"/\" render={HomeComponent} />\r\n                    <Route exact path=\"/userProfile\" render={UserProfileComponent} />\r\n                    <Route exact path=\"/login\" render={LogInComponent} />\r\n                    <Route exact path=\"/credits\" render={CreditsComponent} />\r\n                    <Route exact path=\"/debits\" render={DebitsComponent} />\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n\r\n    // Function will be called as soon as the app properly loads\r\n    componentDidMount() {\r\n\r\n        // Make API call to acquire array of credits\r\n        const getCredits = async () => {\r\n            const response = await fetch(\"https://moj-api.herokuapp.com/credits\");\r\n            const credits = await response.json();\r\n            this.setState({ credits: credits });    // Set current state\r\n\r\n            // Map function to get the sum of all credits in the array\r\n            let addBalance = credits.map((credit) => {\r\n                return this.setState({ accountBalance: this.state.accountBalance + credit.amount });\r\n            });\r\n\r\n            return addBalance;\r\n\r\n        }\r\n\r\n        // Make API call to acquire array of credits\r\n        const getDebits = async () => {\r\n            const response = await fetch(\"https://moj-api.herokuapp.com/debits\");\r\n            const debits = await response.json();\r\n            this.setState({ debits: debits });    // Set current state\r\n\r\n            // Map function to get the sum of all credits in the array\r\n            let subBalance = debits.map((debit) => {\r\n                return this.setState({ accountBalance: this.state.accountBalance - debit.amount });\r\n            });\r\n\r\n            return subBalance;\r\n\r\n        }\r\n\r\n        getCredits();\r\n        getDebits();        // Call the functions in order to populate the credits and debits arrays\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}